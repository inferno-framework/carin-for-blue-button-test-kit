namespace :requirements do
  desc 'Generate requirements coverage CSV'
  task :generate_coverage do
    require 'inferno'
    Inferno::Application.start(:suites)

    require_relative 'lib/inferno_requirements_tools/tasks/map_requirements'
    InfernoRequirementsTools::Tasks::MapRequirements.new.run
  end
end

namespace :requirements do
  desc 'Check if requirements coverage CSV is up-to-date'
  task :check_coverage do
    require 'inferno'
    Inferno::Application.start(:suites)

    require_relative 'lib/inferno_requirements_tools/tasks/map_requirements'
    InfernoRequirementsTools::Tasks::MapRequirements.new.run_check
  end
end

namespace :requirements do
  desc 'Collect requirements and planned not tested requirements into CSVs'
  task :collect_requirements, [:input_directory] => [] do |t, args|
    
    require_relative 'lib/inferno_requirements_tools/tasks/collect_requirements'
    InfernoRequirementsTools::Tasks::CollectRequirements.new.run(args.input_directory)
  end
end

namespace :requirements do
  desc 'Check if requirements and planned not tested CSVs are up-to-date'
  task :check_collected_requirements, [:input_directory] => [] do |t, args|
    
    require_relative 'lib/inferno_requirements_tools/tasks/collect_requirements'
    InfernoRequirementsTools::Tasks::CollectRequirements.new.run_check(args.input_directory)
  end
end